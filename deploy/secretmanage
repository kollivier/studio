#!/usr/bin/env python2
"""
./secretmanage -- manage production secrets!

secretmanage allows you to upload new secrets. These secrets are then available
in production (either in real production, staging or develop) by using the
importsecret module.


Usage:
    secretmanage upload (--dev|--staging|--prod) <name> <secretstring>

<name> is the name of the secret. This will be used as a reference when you import
the secret.

<secretstring> is the content of the secret. These can be the actual DB credentials,
the password to a message broker, or your life's nemesis.
"""
# NOTE to maintainers:
# This encrypts the given plaintext using a keyring with the name of the environment,
# and a key with the same name as the secret.
# We will then upload this key to a bucket called '<project_id>-secrets/', inside a folder in that bucket
# with the same name as the environment. The file in that bucket is named the same as
# the secret.
#
# This means that you need to ensure that a keyring with the same name as the environment is created.
# You also need to make sure that the <project_id>-secrets/ bucket is available.
#
# The persons running this script must also have th Encrypt permission for KMS, and has Edit and Get
# permissions for the bucket.
import logging
import os

from docopt import docopt
from google.cloud import kms_v1
from google.cloud.storage import Client

logging.basicConfig(level=logging.INFO)

# PROJECT_ID = "contentworkshop-159920"
PROJECT_ID = "ops-central"
LOCATION = "global"

kms_client = kms_v1.KeyManagementServiceClient()


def create_key(project_id, location, env, name):
    """
    Create the key. The keyring named after the env should already exist!
    """
    keyring = kms_client.key_ring_path(project_id, location, env)
    key_purpose = kms_v1.enums.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT

    response = kms_client.create_crypto_key(keyring, name, {"purpose": key_purpose})


def get_key_url(project_id, location, env, secret_name):
    """
    Return the URL we can pass to google.cloud.kms to encrypt a string.
    """
    return kms_client.crypto_key_path_path(project_id, location, env, secret_name)


def encrypt_string(key_url, plaintext):
    """
    Encrypt the plaintext string using the given GCloud KMS key.

    Returns the ciphertext.
    """
    response = kms_client.encrypt(key_url, plaintext)
    return response.ciphertext


def upload_ciphertext(project_id, env, name, ciphertext):
    """
    Upload the given ciphertext to the secrets bucket.

    The secret is written as a file located in <env>-secrets/<env>/<name>.

    Note that a bucket with the name {project_id}-secrets should exist. If it doesn't,
    just create one. No special config needed.
    """

    bucket_name = "{id}-secrets".format(id=project_id)
    loc = "{env}/{name}".format(env=env, name=name)

    bucket = Client().get_bucket(bucket_name)

    # Write the ciphertext to the bucket!
    bucket.blob(loc).upload_from_string(ciphertext)


def main():
    args = docopt(__doc__)

    if args["--dev"]:
        args["env"] = "dev"
    elif args["--staging"]:
        args["env"] = "staging"
    elif args["--prod"]:
        args["env"] = "prod"

    env = args["env"]
    name = args["<name>"]
    plaintext = args["<secretstring>"]
    project_id = PROJECT_ID
    location = LOCATION

    logging.info("Creating key...")
    create_key(project_id, location, env, name)

    logging.info("Getting KMS key...")
    key = get_key_url(project_id, location, env, name)

    logging.info("Encrypting string...")
    ciphertext = encrypt_string(key, plaintext)

    # logging.info("Writing encrypted string...")
    logging.info("Uploading encrypted secret to storage...")
    upload_ciphertext(project_id, env, name, ciphertext)

    logging.info("Done!")


main()
